// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  DESKTOP-11LC489
// DateTime: 27.01.2016 16:26:04
// UserName: Artem
// Input file <LM3SyntaxUnit.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using System.IO;

namespace LM3SyntaxScanner
{
public enum Tokens {
    error=1,EOF=2,UnsignedHexNumber=3,Name=4,Sign=5,KeyInit=6,
    KeyCode=7,KeyEnd=8,LeftBracket=9,RightBracket=10,Equal=11,Quotes=12,
    EOS=13};

public struct ValueType
{ 
	public string sVal;
}
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from LM3SyntaxUnit.y
	public Parser(LM3LexicalScanner.Scanner scanner) : base(scanner) { }
	public Dictionary<string, string> names = new Dictionary<string, string>();
	public Dictionary<string, LexLocation> rows = new Dictionary<string, LexLocation>();
	public Dictionary<string, string> values = new Dictionary<string, string>();
  // End verbatim content from LM3SyntaxUnit.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[23];
  private static State[] states = new State[48];
  private static string[] nonTerms = new string[] {
      "program", "title", "assignment", "value", "hexNumber", "command", "$accept", 
      "initPart", "pass", "codePart", "codeList", "codeString", "initList", "initString", 
      };

  static Parser() {
    states[0] = new State(new int[]{6,23,7,9},new int[]{-1,1,-8,3,-10,47});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{13,8},new int[]{-9,4});
    states[4] = new State(new int[]{13,7,7,9},new int[]{-10,5});
    states[5] = new State(new int[]{13,8},new int[]{-9,6});
    states[6] = new State(new int[]{13,7,2,-2});
    states[7] = new State(-22);
    states[8] = new State(-21);
    states[9] = new State(new int[]{13,8},new int[]{-9,10});
    states[10] = new State(new int[]{13,7,3,15},new int[]{-11,11,-12,21});
    states[11] = new State(new int[]{8,12,3,15},new int[]{-12,13});
    states[12] = new State(-4);
    states[13] = new State(new int[]{13,8},new int[]{-9,14});
    states[14] = new State(new int[]{13,7,8,-6,3,-6});
    states[15] = new State(new int[]{3,17},new int[]{-6,16});
    states[16] = new State(-7);
    states[17] = new State(new int[]{3,18});
    states[18] = new State(new int[]{3,19});
    states[19] = new State(new int[]{3,20});
    states[20] = new State(-18);
    states[21] = new State(new int[]{13,8},new int[]{-9,22});
    states[22] = new State(new int[]{13,7,8,-5,3,-5});
    states[23] = new State(new int[]{13,8},new int[]{-9,24});
    states[24] = new State(new int[]{13,7,3,29},new int[]{-13,25,-14,45});
    states[25] = new State(new int[]{8,26,3,29},new int[]{-14,27});
    states[26] = new State(-8);
    states[27] = new State(new int[]{13,8},new int[]{-9,28});
    states[28] = new State(new int[]{13,7,8,-10,3,-10});
    states[29] = new State(new int[]{9,42,11,32},new int[]{-2,30,-3,41});
    states[30] = new State(new int[]{11,32,13,-12},new int[]{-3,31});
    states[31] = new State(-11);
    states[32] = new State(new int[]{3,35,5,36,12,38},new int[]{-4,33,-5,34});
    states[33] = new State(-15);
    states[34] = new State(-16);
    states[35] = new State(-19);
    states[36] = new State(new int[]{3,37});
    states[37] = new State(-20);
    states[38] = new State(new int[]{3,17},new int[]{-6,39});
    states[39] = new State(new int[]{12,40});
    states[40] = new State(-17);
    states[41] = new State(-13);
    states[42] = new State(new int[]{4,43});
    states[43] = new State(new int[]{10,44});
    states[44] = new State(-14);
    states[45] = new State(new int[]{13,8},new int[]{-9,46});
    states[46] = new State(new int[]{13,7,8,-9,3,-9});
    states[47] = new State(-3);

    rules[1] = new Rule(-7, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-8,-9,-10,-9});
    rules[3] = new Rule(-1, new int[]{-10});
    rules[4] = new Rule(-10, new int[]{7,-9,-11,8});
    rules[5] = new Rule(-11, new int[]{-12,-9});
    rules[6] = new Rule(-11, new int[]{-11,-12,-9});
    rules[7] = new Rule(-12, new int[]{3,-6});
    rules[8] = new Rule(-8, new int[]{6,-9,-13,8});
    rules[9] = new Rule(-13, new int[]{-14,-9});
    rules[10] = new Rule(-13, new int[]{-13,-14,-9});
    rules[11] = new Rule(-14, new int[]{3,-2,-3});
    rules[12] = new Rule(-14, new int[]{3,-2});
    rules[13] = new Rule(-14, new int[]{3,-3});
    rules[14] = new Rule(-2, new int[]{9,4,10});
    rules[15] = new Rule(-3, new int[]{11,-4});
    rules[16] = new Rule(-4, new int[]{-5});
    rules[17] = new Rule(-4, new int[]{12,-6,12});
    rules[18] = new Rule(-6, new int[]{3,3,3,3});
    rules[19] = new Rule(-5, new int[]{3});
    rules[20] = new Rule(-5, new int[]{5,3});
    rules[21] = new Rule(-9, new int[]{13});
    rules[22] = new Rule(-9, new int[]{-9,13});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // program -> initPart, pass, codePart, pass
{ }
        break;
      case 3: // program -> codePart
{ }
        break;
      case 4: // codePart -> KeyCode, pass, codeList, KeyEnd
{ }
        break;
      case 5: // codeList -> codeString, pass
{}
        break;
      case 6: // codeList -> codeList, codeString, pass
{ }
        break;
      case 7: // codeString -> UnsignedHexNumber, command
{
					rows.Add(ValueStack[ValueStack.Depth-2].sVal, CurrentLocationSpan);
					values.Add(ValueStack[ValueStack.Depth-2].sVal, ValueStack[ValueStack.Depth-1].sVal);
				}
        break;
      case 8: // initPart -> KeyInit, pass, initList, KeyEnd
{ }
        break;
      case 9: // initList -> initString, pass
{}
        break;
      case 10: // initList -> initList, initString, pass
{}
        break;
      case 11: // initString -> UnsignedHexNumber, title, assignment
{ 
					names.Add(ValueStack[ValueStack.Depth-3].sVal, ValueStack[ValueStack.Depth-2].sVal);
					values.Add(ValueStack[ValueStack.Depth-3].sVal, ValueStack[ValueStack.Depth-1].sVal);
				}
        break;
      case 12: // initString -> UnsignedHexNumber, title
{ 
					names.Add(ValueStack[ValueStack.Depth-2].sVal, ValueStack[ValueStack.Depth-1].sVal);
				}
        break;
      case 13: // initString -> UnsignedHexNumber, assignment
{ 
					values.Add(ValueStack[ValueStack.Depth-2].sVal, ValueStack[ValueStack.Depth-1].sVal);
				}
        break;
      case 14: // title -> LeftBracket, Name, RightBracket
{
					CurrentSemanticValue.sVal = ValueStack[ValueStack.Depth-2].sVal;
				}
        break;
      case 15: // assignment -> Equal, value
{ 
					CurrentSemanticValue.sVal = ValueStack[ValueStack.Depth-1].sVal;
				}
        break;
      case 16: // value -> hexNumber
{ 
					CurrentSemanticValue.sVal = ValueStack[ValueStack.Depth-1].sVal;
				}
        break;
      case 17: // value -> Quotes, command, Quotes
{
					CurrentSemanticValue.sVal = ValueStack[ValueStack.Depth-2].sVal;
				}
        break;
      case 18: // command -> UnsignedHexNumber, UnsignedHexNumber, UnsignedHexNumber, 
               //            UnsignedHexNumber
{
					CurrentSemanticValue.sVal = String.Format("{0} {1} {2} {3}", ValueStack[ValueStack.Depth-4].sVal, ValueStack[ValueStack.Depth-3].sVal, ValueStack[ValueStack.Depth-2].sVal, ValueStack[ValueStack.Depth-1].sVal);
				}
        break;
      case 19: // hexNumber -> UnsignedHexNumber
{
					CurrentSemanticValue.sVal = ValueStack[ValueStack.Depth-1].sVal;
				}
        break;
      case 20: // hexNumber -> Sign, UnsignedHexNumber
{
					CurrentSemanticValue.sVal = ValueStack[ValueStack.Depth-2].sVal + ValueStack[ValueStack.Depth-1].sVal;
				}
        break;
      case 21: // pass -> EOS
{ }
        break;
      case 22: // pass -> pass, EOS
{ }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


}
}
